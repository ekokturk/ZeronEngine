# Add a new Zeron Module
macro(zeron_add_module module_name module_dir)
    message("ZERON -- Module: ${module_name}")
    if(NOT EXISTS ${module_dir})
        message(FATAL_ERROR "${ZERON_ERROR_MSG} Zeron Third Party directory doesn't exist!")
    endif()
    file(GLOB_RECURSE module_files	"${module_dir}/*.cpp"	"${module_dir}/*.h")
    source_group(TREE "${module_dir}"	PREFIX "Source Files/" FILES ${module_files})
    add_library(${module_name} ${module_files})
    set_target_properties(${module_name} PROPERTIES FOLDER "ZeronEngine")
    set_property(TARGET ${module_name} PROPERTY VS_DEBUGGER_WORKING_DIRECTORY $<TARGET_FILE_DIR:${module_name}>)
endmacro()

# Add a new Zeron Third Party dependency
macro(zeron_add_module_dependency dep_name)
    if(NOT DEFINED ZERON_THIRDPARTY_DIR)
        message(FATAL_ERROR "${ZERON_ERROR_MSG} Zeron Third Party directory is not defined!")
        if(NOT EXISTS ${ZERON_THIRDPARTY_DIR})
            message(FATAL_ERROR "${ZERON_ERROR_MSG} Zeron Third Party directory doesn't exist!")
        endif()
    endif()
    # Only create target if it's not already created
    if(NOT TARGET ${dep_name})
        message("ZERON ------ Dependency: ${dep_name}")
        file(RELATIVE_PATH rel_path ${CMAKE_CURRENT_SOURCE_DIR} ${ZERON_THIRDPARTY_DIR})
        add_subdirectory("${rel_path}/${dep_name}" "${CMAKE_CURRENT_BINARY_DIR}/${dep_name}" EXCLUDE_FROM_ALL)
    endif()
endmacro()

# Create a new Zeron Test Module
macro(zeron_create_module_test module_name)
    if(TARGET ${module_name})
        file(GLOB_RECURSE test_files LIST_DIRECTORIES false *.h *.cpp)
        set_property(GLOBAL PROPERTY "${module_name}_TEST_ROOT" "${CMAKE_CURRENT_SOURCE_DIR}")
        set_property(GLOBAL PROPERTY "${module_name}_TEST_SOURCES" "${test_files}")
    endif()
endmacro()

macro(zeron_target_add_module_test target module_name)
    get_property(_testModuleRoot GLOBAL PROPERTY "${module_name}_TEST_ROOT")
    get_property(_testModuleSources GLOBAL PROPERTY "${module_name}_TEST_SOURCES")
    if(DEFINED _testModuleSources)
        source_group(TREE ${_testModuleRoot}	PREFIX "Source Files/${module_name}" FILES ${_testModuleSources})
        target_sources(${target} PUBLIC ${_testModuleSources})
        gtest_add_tests(TARGET ${target} TEST_PREFIX "${module_name}." SOURCES ${_testModuleSources})
        target_link_libraries(${target} PUBLIC ${module_name})
        zeron_copy_library_symbols(${target} ${module_name})
    endif()
endmacro()
