//  Copyright (C) Eser Kokturk. All Rights Reserved.

//@begin_stage Vertex

//@push_constant
cbuffer meshInfo {
    uint _meshInstanceOffset;
};

//@register
cbuffer MVP
{
	float4x4 _viewProjection;
	float4x4 _view;
	float4x4 _projection;
};

struct MeshInstanceData {
	float4x4 mLocalTransform;
	float4x4 mParentTransform;
};

//@register
StructuredBuffer<MeshInstanceData> _meshInstanceData;


struct VSInput
{
	//@input 0
	float3 Pos : POSITION;
	//@input 1
	//@slot 1
	float2 TextureCoord : TEXTURE_COORD;
	//@input 2
	//@slot 2
	float3 Normal : NORMAL;
	//@input 3
	//@slot 3
	float4 Tangent : TANGENT;
};

struct VSOutput
{
	float4 Pos : SV_POSITION;
	float2 TextureCoord : TEXTURE_COORD;
	float3 Normal : NORMAL;
	float3 Tangent : TANGENT;
	float3 Binormal : BINORMAL;
	float3 WorldPos : WORLD_POSITION;
};

VSOutput main(VSInput input, uint instanceID : SV_InstanceID)
{
	VSOutput output;
	MeshInstanceData meshData = _meshInstanceData[_meshInstanceOffset + instanceID];
	float4x4 meshTransform = mul(meshData.mLocalTransform, meshData.mParentTransform);
	float4 worldPos = mul(float4(input.Pos, 1.f), meshTransform);
	
	float3 binormal = input.Tangent.w * cross(input.Normal, input.Tangent.xyz);

	output.Pos = mul(worldPos, _viewProjection);
	output.TextureCoord = input.TextureCoord;
	output.Normal = normalize(input.Normal);
	output.Tangent = normalize(input.Tangent);
	output.Binormal = normalize(binormal);
	output.WorldPos = worldPos;
	return output;
}

//@end_stage

//@begin_stage Fragment

struct Light 
{
	float4 mColor;
	float4 mPosition;
	float4 mDirection;
	float4 mPositionView;
	float4 mDirectionView;
	float2 mSpotAngle;
	float mRange;
	uint mType;
};

//@register
StructuredBuffer<Light> _lights;

//@register
Texture2D mDiffuseTexture;

//@register
Texture2D mNormalTexture;

//@register
Texture2D mShadowTexture;

//@register
SamplerState mDefaultSampler;

//@register
cbuffer LightingInfoBuffer
{
	float4x4 _shadowMVP;
	int _hasShadows;
	float3 _ambientLightColor;
	float _ambientLightStrength;
	int _lightCount;
	int _padding[2];
}

struct FSInput
{
	float4 Position : SV_POSITION;
	float2 TextureCoord: TEXTURE_COORD;
	float3 Normal : NORMAL;
	float3 Tangent : TANGENT;
	float3 Binormal : BINORMAL;
	float3 WorldPos : WORLD_POSITION;
};

struct LightingResult
{
    float3 mDiffuse;
    float3 mSpecular;
};

float3 CalculateDiffuse(float3 lightColor, float4 lightDir, float4 normal)
{
    float ndotL = max(dot(normal, lightDir), 0);
    return lightColor * ndotL;
}

float3 CalculateSpecular(float3 lightColor, float4 lightDir, float4 normal, float4 viewDir, float specularPower )
{
    float4 reflectionDir = normalize( reflect( -lightDir, normal ) );
    float rdotV = max(dot( reflectionDir, viewDir), 0);
 
    return lightColor * pow(rdotV,specularPower );
}

float CalculateAttenuation(float range, float lightDistance)
{
    return 1.0f - smoothstep(range * 0.75f, range, lightDistance);
}

LightingResult CalculateDirectionalLight(Light light, float4 viewDir, float4 normal)
{
    float4 lightDir = normalize( -light.mDirectionView );
	float intensity = light.mColor.w;
	float specularPower = 1.f;

    LightingResult result;
	result.mDiffuse = CalculateDiffuse(light.mColor.rgb, lightDir, normal) * intensity;
	result.mSpecular = CalculateSpecular(light.mColor.rgb, lightDir, normal, viewDir, specularPower) * intensity;
    return result;
}

LightingResult CalculatePointLight(Light light, float4 viewPos, float4 viewDir, float4 normal)
{
    float4 lightDir = light.mPositionView - viewPos;
    float distance = length(lightDir);
    lightDir = lightDir / distance;
	float range = light.mRange;
    float attenuation = CalculateAttenuation( range, distance );
	float intensity = light.mColor.w;
	float specularPower = 1.f;

    LightingResult result;
	result.mDiffuse = CalculateDiffuse(light.mColor.rgb, lightDir, normal) * attenuation * intensity;
	result.mSpecular = CalculateSpecular(light.mColor.rgb, lightDir, normal, viewDir, specularPower) * attenuation * intensity;
    return result;
}

LightingResult CalculateSpotLight(Light light, float4 viewPos, float4 viewDir, float4 normal)
{
    float4 lightDir = light.mPositionView - viewPos;
    float distance = length(lightDir);
    lightDir = lightDir / distance;
	float range = light.mRange;
    float attenuation = CalculateAttenuation( range, distance );
	float intensity = light.mColor.w;
	float specularPower = 1.f;

	float spotFactor = dot((float3)light.mDirectionView, (float3)-lightDir);
	float spotInnerCos = cos(radians(light.mSpotAngle[0]));
    float spotOuterCos = cos(radians(light.mSpotAngle[1]));
    float spotEffect = smoothstep(spotOuterCos, spotInnerCos, spotFactor);

    LightingResult result;
	result.mDiffuse = CalculateDiffuse(light.mColor.rgb, lightDir, normal) * attenuation * intensity * spotEffect;
	result.mSpecular = CalculateSpecular(light.mColor.rgb, lightDir, normal, viewDir, specularPower) * attenuation * intensity * spotEffect;
    return result;
}

float CalculateShadow(float4 lightSpacePos) 
{
	float3 projCoords = lightSpacePos.xyz / lightSpacePos.w;

    // if( projCoords.x < -1.0f || projCoords.x > 1.0f ||
    //     projCoords.y < -1.0f || projCoords.y > 1.0f ||
    //     projCoords.z < 0.0f  || projCoords.z > 1.0f ) return 1.f;
 
    //transform clip space coords to texture space coords (-1:1 to 0:1)
    projCoords.x = projCoords.x/2 + 0.5;
    projCoords.y = projCoords.y/-2 + 0.5;
 
    float shadowMapDepth = mShadowTexture.Sample(mDefaultSampler, projCoords.xy).r;
 
    // if clip space z value greater than shadow map value then pixel is in shadow
	float bias = 0.0001;
	// float bias = max(0.05 * (1.0 - dot(normal, lightDir)), 0.005);  
	// return  shadowMapDepth < projCoords.z - bias ? 1.f : 0.f;

	// Define PCF 
	uint textureWidth, textureHeight;
	mShadowTexture.GetDimensions(textureWidth, textureHeight);
	int kernelSize = 3; 
	float shadow = 0.0f;
	float texelSize = 1.0f / textureWidth;
	// Loop over a kernel around the sampling point
	for (int x = -kernelSize; x <= kernelSize; ++x) {
		for (int y = -kernelSize; y <= kernelSize; ++y) {
			float2 offset = float2(x, y) * texelSize;
			float shadowMapDepth = mShadowTexture.Sample(mDefaultSampler, projCoords.xy + offset).r;
			shadow += shadowMapDepth < projCoords.z - bias ? 1.0f : 0.0f;
		}
	}
	// Normalize by the total number of samples
	int totalSamples = (kernelSize * 2 + 1) * (kernelSize * 2 + 1);
	return shadow / totalSamples;
}

float4 main(FSInput input) : SV_TARGET
{
    float4 eyePos = { 0, 0, 0, 1 };
	float4 viewPos = float4( input.WorldPos, 1 );
	float4 viewDir = normalize( eyePos - viewPos );

	// Diffuse
	float3 diffuse = mDiffuseTexture.Sample(mDefaultSampler, input.TextureCoord).xyz;

	// Ambient
	float3 ambient = _ambientLightColor * _ambientLightStrength;

	// Normal Mapping
	float4 normal = normalize(float4( input.Normal, 0 ));	
	float3 normalCalc = mNormalTexture.Sample( mDefaultSampler, input.TextureCoord).xyz;
	if(any(normalCalc)) {
		normalCalc = normalCalc * 2.0f - 1.0f;
		float3x3 TBN = float3x3( normalize( input.Tangent ),
								normalize( input.Binormal ),
								normalize( input.Normal ) );
		normalCalc = mul( normalCalc, TBN );
	}
	normal = normalize(float4(normalCalc, 0 ));

	// Specular Mapping
	float4 specular = 0;	

	// Lighting
	LightingResult lightingResult = (LightingResult)0;
	for(int i = 0; i < _lightCount; ++i) {
		LightingResult lightResult = (LightingResult)0;
		switch (_lights[i].mType) {
			case 1: {
				lightResult = CalculateDirectionalLight(_lights[i], viewDir, normal);
			} break;
			case 2: {
				lightResult = CalculatePointLight(_lights[i], viewPos, viewDir, normal);
			} break;
			case 3: {
				lightResult = CalculateSpotLight(_lights[i], viewPos, viewDir, normal);
			} break;
		}
		lightingResult.mDiffuse += lightResult.mDiffuse;
		lightingResult.mSpecular += lightResult.mSpecular;
	}

    diffuse *= lightingResult.mDiffuse.rgb;

	// Shadow Mapping
	float shadow = 0;
	if (_hasShadows) {
		float4 lightSpacePos = mul(float4(input.WorldPos, 1.f), _shadowMVP);
		shadow = CalculateShadow(lightSpacePos);
	}

	float3 finalColor = diffuse * (1 - shadow) + ambient ;
	return float4(finalColor, 1.f);
}

//@end_stage